/**
 * Script pour mettre √† jour uniquement les activit√©s d'Amsterdam
 */

const updateAmsterdamImages = async () => {
  console.log('üìç Mise √† jour des activit√©s d\'Amsterdam avec de vraies photos...\n')
  
  try {
    const response = await fetch('http://localhost:3000/api/update-activity-images', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        city: 'Amsterdam', 
        limit: 8 
      })
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log(`‚úÖ R√©sultats pour Amsterdam:`)
      console.log(`   - Images mises √† jour: ${data.updated}`)
      console.log(`   - √âchecs: ${data.failed}`)
      console.log(`   - Total trait√©es: ${data.activities.length}\n`)
      
      console.log('üìã D√©tail des activit√©s:')
      data.activities.forEach((activity, index) => {
        if (activity.success) {
          console.log(`   ${index + 1}. ‚úÖ ${activity.name}`)
        } else {
          console.log(`   ${index + 1}. ‚ùå ${activity.name} - ${activity.error || 'Erreur inconnue'}`)
        }
      })
      
      console.log('\nüéâ Mise √† jour d\'Amsterdam termin√©e!')
      
      // V√©rifier les r√©sultats
      console.log('\nüîç V√©rification des r√©sultats...')
      setTimeout(() => {
        const { execSync } = require('child_process')
        try {
          execSync('node check-database.js', { stdio: 'inherit' })
        } catch (error) {
          console.log('‚ùå Erreur lors de la v√©rification:', error.message)
        }
      }, 2000)
      
    } else {
      console.log('‚ùå Erreur lors de la requ√™te:', response.status, response.statusText)
      const errorText = await response.text()
      console.log('D√©tail de l\'erreur:', errorText)
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour:', error)
  }
}

// Ex√©cuter la mise √† jour
updateAmsterdamImages()
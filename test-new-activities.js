/**
 * Script pour tester que les nouvelles activit√©s g√©n√®rent bien des photos r√©elles
 */

const testNewActivities = async () => {
  console.log('üß™ Test de g√©n√©ration de nouvelles activit√©s avec photos r√©elles...\n')
  
  try {
    // Test 1: G√©n√©rer des activit√©s pour une nouvelle ville
    console.log('üèôÔ∏è Test 1: G√©n√©ration d\'activit√©s pour Barcelone...')
    const barcelonaResponse = await fetch('http://localhost:3000/api/suggest-activities', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        city: 'Barcelone', 
        participants: 2,
        budget: '‚Ç¨‚Ç¨' 
      })
    })
    
    if (barcelonaResponse.ok) {
      const barcelonaData = await barcelonaResponse.json()
      console.log(`‚úÖ Barcelone: ${barcelonaData.activities.length} activit√©s g√©n√©r√©es`)
      
      // V√©rifier les types d'images
      let realImages = 0
      let svgImages = 0
      
      barcelonaData.activities.forEach(activity => {
        if (activity.image && activity.image.startsWith('data:image/png;base64,')) {
          realImages++
        } else if (activity.image && activity.image.startsWith('data:image/svg+xml')) {
          svgImages++
        }
      })
      
      console.log(`   - Photos r√©elles: ${realImages}`)
      console.log(`   - Images SVG: ${svgImages}`)
      
      if (realImages > 0) {
        console.log('   ‚úÖ SUCC√àS: Des photos r√©elles ont √©t√© g√©n√©r√©es!')
      } else {
        console.log('   ‚ö†Ô∏è INFO: Uniquement des SVG (normal si l\'API est satur√©e)')
      }
      
    } else {
      console.log('‚ùå Erreur pour Barcelone:', await barcelonaResponse.text())
    }
    
    // Attendre un peu
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    // Test 2: G√©n√©rer des activit√©s th√©matiques pour Amsterdam
    console.log('\nüé® Test 2: G√©n√©ration d\'activit√©s culturelles pour Amsterdam...')
    const amsterdamResponse = await fetch('http://localhost:3000/api/more-activities', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        city: 'Amsterdam', 
        theme: 'Culturel', 
        existingActivities: [],
        participants: 2 
      })
    })
    
    if (amsterdamResponse.ok) {
      const amsterdamData = await amsterdamResponse.json()
      console.log(`‚úÖ Amsterdam Culturel: ${amsterdamData.activities.length} activit√©s g√©n√©r√©es`)
      
      // V√©rifier les types d'images
      let realImages = 0
      let svgImages = 0
      
      amsterdamData.activities.forEach(activity => {
        if (activity.image && activity.image.startsWith('data:image/png;base64,')) {
          realImages++
        } else if (activity.image && activity.image.startsWith('data:image/svg+xml')) {
          svgImages++
        }
      })
      
      console.log(`   - Photos r√©elles: ${realImages}`)
      console.log(`   - Images SVG: ${svgImages}`)
      
      if (realImages > 0) {
        console.log('   ‚úÖ SUCC√àS: Des photos r√©elles ont √©t√© g√©n√©r√©es!')
      } else {
        console.log('   ‚ö†Ô∏è INFO: Uniquement des SVG (normal si l\'API est satur√©e)')
      }
      
    } else {
      console.log('‚ùå Erreur pour Amsterdam Culturel:', await amsterdamResponse.text())
    }
    
    // Test 3: V√©rifier l'√©tat final de la base de donn√©es
    console.log('\nüìä Test 3: V√©rification finale de la base de donn√©es...')
    setTimeout(() => {
      const { execSync } = require('child_process')
      try {
        execSync('node check-database.js', { stdio: 'inherit' })
      } catch (error) {
        console.log('‚ùå Erreur lors de la v√©rification:', error.message)
      }
    }, 2000)
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testNewActivities()
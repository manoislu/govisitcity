/**
 * Script pour nettoyer les activit√©s g√©n√©riques et forcer la r√©g√©n√©ration
 */

const { PrismaClient } = require('@prisma/client')

const cleanupGenericActivities = async () => {
  const db = new PrismaClient()
  
  try {
    console.log('üßπ Nettoyage des activit√©s g√©n√©riques...\n')
    
    // R√©cup√©rer toutes les activit√©s
    const allActivities = await db.activities.findMany({
      where: { isActive: true },
      select: {
        id: true,
        name: true,
        city: true,
        category: true,
        theme: true
      }
    })
    
    console.log(`üìä Total d'activit√©s: ${allActivities.length}`)
    
    // Identifier les activit√©s g√©n√©riques (qui ne mentionnent pas leur ville dans le nom)
    const genericActivities = allActivities.filter(activity => {
      const activityName = activity.name.toLowerCase()
      const cityName = activity.city.toLowerCase()
      
      // V√©rifier si le nom de l'activit√© mentionne la ville ou un lieu sp√©cifique
      const mentionsCity = activityName.includes(cityName) || 
                          activityName.includes('amsterdam') || 
                          activityName.includes('paris') || 
                          activityName.includes('londres') || 
                          activityName.includes('marseille') || 
                          activityName.includes('lyon') || 
                          activityName.includes('barcelone') ||
                          activityName.includes('sagrada') ||
                          activityName.includes('rijksmuseum') ||
                          activityName.includes('van gogh') ||
                          activityName.includes('notre-dame') ||
                          activityName.includes('vondelpark') ||
                          activityName.includes('eiffel') ||
                          activityName.includes('louvre') ||
                          activityName.includes('tower') ||
                          activityName.includes('big ben') ||
                          activityName.includes('canal')
      
      return !mentionsCity
    })
    
    console.log(`üéØ Activit√©s g√©n√©riques identifi√©es: ${genericActivities.length}`)
    
    if (genericActivities.length > 0) {
      console.log('\nüìã Liste des activit√©s g√©n√©riques √† supprimer:')
      genericActivities.forEach((activity, index) => {
        console.log(`   ${index + 1}. ${activity.name} (${activity.city})`)
      })
      
      // Supprimer les activit√©s g√©n√©riques
      console.log('\nüóëÔ∏è Suppression des activit√©s g√©n√©riques...')
      
      for (const activity of genericActivities) {
        await db.activities.delete({
          where: { id: activity.id }
        })
        console.log(`   ‚ùå Supprim√©: ${activity.name}`)
      }
      
      console.log(`\n‚úÖ ${genericActivities.length} activit√©s g√©n√©riques supprim√©es`)
      
      // Afficher le nouvel √©tat
      const remainingActivities = await db.activities.findMany({
        where: { isActive: true },
        select: {
          id: true,
          name: true,
          city: true
        }
      })
      
      console.log(`\nüìä Activit√©s restantes: ${remainingActivities.length}`)
      console.log('\nüìã Activit√©s restantes (toutes sp√©cifiques √† leur ville):')
      remainingActivities.forEach((activity, index) => {
        console.log(`   ${index + 1}. ${activity.name} (${activity.city})`)
      })
      
    } else {
      console.log('‚úÖ Aucune activit√© g√©n√©rique trouv√©e!')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error)
  } finally {
    await db.$disconnect()
  }
}

cleanupGenericActivities()
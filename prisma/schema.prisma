// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Trip {
  id          String   @id @default(cuid())
  city        String
  startDate   DateTime
  endDate     DateTime
  participants Int     @default(2)
  budget      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  itineraries ItineraryDay[]
}

// Global activities database - pre-populated with images
model Activity {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  duration    String
  rating      Float?
  price       String?
  image       String?  // Base64 or URL
  city        String   // City where this activity is available
  theme       String?  // Theme tag (romantique, aventure, etc.)
  isPopular   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  itineraryItems ItineraryItem[]
  
  @@index([city])
  @@index([category])
  @@index([theme])
}

model ItineraryDay {
  id         String   @id @default(cuid())
  day        Int
  date       DateTime
  tripId     String
  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  activities ItineraryItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ItineraryItem {
  id           String        @id @default(cuid())
  order        Int
  activityId   String
  activity     Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
  itineraryDay ItineraryDay  @relation(fields: [itineraryDayId], references: [id], onDelete: Cascade)
  itineraryDayId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TravelPlan {
  id           String   @id @default(cuid())
  title        String
  city         String
  startDate    DateTime
  endDate      DateTime
  participants Int
  budget       String?
  activityIds  String   // Liste des IDs d'activités en JSON
  itinerary    Json     // Itinéraire avec les IDs des activités
  userId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}